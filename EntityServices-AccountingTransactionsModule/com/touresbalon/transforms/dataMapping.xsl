<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="com/touresbalon/transforms/dataMapping.map" md5sum="a9621a8f5fb05ca3332de3e88e3a09bc" version="7.0.500" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.500
*
*   Mapping file:		dataMapping.map
*   Map declaration(s):	dataMapping
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FAccountingTransactionsLib%252Fcom%252Ftouresbalon%252Finterfaces%252FAccountingTransactionsServiceIF%257DregisterMovementRequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FEntityServices-AccountingTransactionsModule%252Fcom%252Ftouresbalon%252Faccounting%252FFlatFileImport%257DappendRequestMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="http://AccountingTransactionsLib/com/touresbalon/interfaces/AccountingTransactionsServiceIF"
    xmlns:in2="wsdl.http://AccountingTransactionsLib/com/touresbalon/interfaces/AccountingTransactionsServiceIF"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out="wsdl.http://EntityServices-AccountingTransactionsModule/com/touresbalon/accounting/FlatFileImport"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:io6="http://AccountingTransactionsLib/com/touresbalon/bo"
    xmlns:out2="http://www.ibm.com/xmlns/prod/websphere/j2ca/flatfile/accountingmovementwrapper"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io7="http://www.w3.org/2005/08/addressing"
    xmlns:out3="http://EntityServices-AccountingTransactionsModule/com/touresbalon/accounting/FlatFileImport"
    xmlns:map="http://EntityServices-AccountingTransactionsModule/com/touresbalon/transforms/dataMapping"
    exclude-result-prefixes="xalan str set in math map exsl in2 date"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:dataMapping"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:dataMapping">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:appendRequestMsg'"/>
      </xsl:attribute>
      <out3:append>
        <out3:appendInput>
          <!-- a simple mapping with no associated source:  to "fileName"(string) -->
          <fileName>
            <xsl:text>TRANSACTIONS.DAT</xsl:text>
          </fileName>
          <!-- a simple mapping with no associated source:  to "includeEndBODelimiter"(string) -->
          <includeEndBODelimiter>
            <xsl:text>\r\n</xsl:text>
          </includeEndBODelimiter>
          <!-- a simple mapping with no associated source:  to "createFileIfNotExists"(boolean) -->
          <createFileIfNotExists>
            <xsl:text>true</xsl:text>
          </createFileIfNotExists>
          <Content>
            <!-- a simple data mapping: "in:registerMovement/request/TransactionID"(string) to "TransactionID"(string) -->
            <xsl:if test="in:registerMovement/request/TransactionID">
              <TransactionID>
                <xsl:value-of select="in:registerMovement/request/TransactionID"/>
              </TransactionID>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/TransactionNumber"(string) to "TransactionNumber"(string) -->
            <xsl:if test="in:registerMovement/request/TransactionNumber">
              <TransactionNumber>
                <xsl:value-of select="in:registerMovement/request/TransactionNumber"/>
              </TransactionNumber>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/TransactionYear"(int) to "TransactionYear"(int) -->
            <xsl:if test="in:registerMovement/request/TransactionYear">
              <TransactionYear>
                <xsl:value-of select="in:registerMovement/request/TransactionYear"/>
              </TransactionYear>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/TransactionMonth"(int) to "TransactionMonth"(int) -->
            <xsl:if test="in:registerMovement/request/TransactionMonth">
              <TransactionMonth>
                <xsl:value-of select="in:registerMovement/request/TransactionMonth"/>
              </TransactionMonth>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/TransactionDay"(int) to "TransactionDay"(int) -->
            <xsl:if test="in:registerMovement/request/TransactionDay">
              <TransactionDay>
                <xsl:value-of select="in:registerMovement/request/TransactionDay"/>
              </TransactionDay>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/AccountID"(string) to "AccountID"(string) -->
            <xsl:if test="in:registerMovement/request/AccountID">
              <AccountID>
                <xsl:value-of select="in:registerMovement/request/AccountID"/>
              </AccountID>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/WithdrawalAmount"(double) to "WithdrawalAmount"(double) -->
            <xsl:if test="in:registerMovement/request/WithdrawalAmount">
              <WithdrawalAmount>
                <xsl:value-of select="in:registerMovement/request/WithdrawalAmount"/>
              </WithdrawalAmount>
            </xsl:if>
            <!-- a simple data mapping: "in:registerMovement/request/DepositAmount"(double) to "DepositAmount"(double) -->
            <xsl:if test="in:registerMovement/request/DepositAmount">
              <DepositAmount>
                <xsl:value-of select="in:registerMovement/request/DepositAmount"/>
              </DepositAmount>
            </xsl:if>
          </Content>
        </out3:appendInput>
      </out3:append>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:dataMapping2">
    <xsl:param name="body"/>
    <out3:append>
      <out3:appendInput>
        <!-- a simple mapping with no associated source:  to "fileName"(string) -->
        <fileName>
          <xsl:text>TRANSACTIONS.DAT</xsl:text>
        </fileName>
        <!-- a simple mapping with no associated source:  to "includeEndBODelimiter"(string) -->
        <includeEndBODelimiter>
          <xsl:text>\r\n</xsl:text>
        </includeEndBODelimiter>
        <!-- a simple mapping with no associated source:  to "createFileIfNotExists"(boolean) -->
        <createFileIfNotExists>
          <xsl:text>true</xsl:text>
        </createFileIfNotExists>
        <Content>
          <!-- a simple data mapping: "$body/in:registerMovement/request/TransactionID"(string) to "TransactionID"(string) -->
          <xsl:if test="$body/in:registerMovement/request/TransactionID">
            <TransactionID>
              <xsl:value-of select="$body/in:registerMovement/request/TransactionID"/>
            </TransactionID>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/TransactionNumber"(string) to "TransactionNumber"(string) -->
          <xsl:if test="$body/in:registerMovement/request/TransactionNumber">
            <TransactionNumber>
              <xsl:value-of select="$body/in:registerMovement/request/TransactionNumber"/>
            </TransactionNumber>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/TransactionYear"(int) to "TransactionYear"(int) -->
          <xsl:if test="$body/in:registerMovement/request/TransactionYear">
            <TransactionYear>
              <xsl:value-of select="$body/in:registerMovement/request/TransactionYear"/>
            </TransactionYear>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/TransactionMonth"(int) to "TransactionMonth"(int) -->
          <xsl:if test="$body/in:registerMovement/request/TransactionMonth">
            <TransactionMonth>
              <xsl:value-of select="$body/in:registerMovement/request/TransactionMonth"/>
            </TransactionMonth>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/TransactionDay"(int) to "TransactionDay"(int) -->
          <xsl:if test="$body/in:registerMovement/request/TransactionDay">
            <TransactionDay>
              <xsl:value-of select="$body/in:registerMovement/request/TransactionDay"/>
            </TransactionDay>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/AccountID"(string) to "AccountID"(string) -->
          <xsl:if test="$body/in:registerMovement/request/AccountID">
            <AccountID>
              <xsl:value-of select="$body/in:registerMovement/request/AccountID"/>
            </AccountID>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/WithdrawalAmount"(double) to "WithdrawalAmount"(double) -->
          <xsl:if test="$body/in:registerMovement/request/WithdrawalAmount">
            <WithdrawalAmount>
              <xsl:value-of select="$body/in:registerMovement/request/WithdrawalAmount"/>
            </WithdrawalAmount>
          </xsl:if>
          <!-- a simple data mapping: "$body/in:registerMovement/request/DepositAmount"(double) to "DepositAmount"(double) -->
          <xsl:if test="$body/in:registerMovement/request/DepositAmount">
            <DepositAmount>
              <xsl:value-of select="$body/in:registerMovement/request/DepositAmount"/>
            </DepositAmount>
          </xsl:if>
        </Content>
      </out3:appendInput>
    </out3:append>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
