<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/output_map_res_1.map" md5sum="4e5d2330733ba4c91d8979768b4736ee" version="7.0.500" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.500
*
*   Mapping file:		output_map_res_1.map
*   Map declaration(s):	output_map_res_1
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FDBMSServiceMediation%252FJDBCOutboundInterface%257DretrieveDbadminItemBGResponseMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FOrderManagementLib%252FItemServiceIF%257DretrieveItemResponseMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminorderheadercontainer"
    xmlns:in2="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminitemcontainer"
    xmlns:in3="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminitemwhs"
    xmlns:in4="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminitemwhsbg"
    xmlns:in5="http://com/ibm/j2ca/fault"
    xmlns:in6="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminitemwhscontainer"
    xmlns:in7="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminorderheader"
    xmlns:in8="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminitem"
    xmlns:in11="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/metadata"
    xmlns:in10="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminitembg"
    xmlns:in9="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadminorderheaderbg"
    xmlns:in13="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadmincustomercontainer"
    xmlns:in12="http://com/ibm/j2ca/fault/afcfault"
    xmlns:in14="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadmincustomer"
    xmlns:in15="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/existsresult"
    xmlns:in16="http://www.ibm.com/xmlns/prod/websphere/j2ca/jdbc/dbadmincustomerbg"
    xmlns:in17="wsdl.http://DBMSServiceMediation/JDBCOutboundInterface"
    xmlns:in18="http://DBMSServiceMediation/JDBCOutboundInterface"
    xmlns:in19="http://www.ibm.com/xmlns/prod/websphere/bo/6.0.0"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="http://OrderManagementLib/ItemServiceIF"
    xmlns:out2="http://OrderManagementLib"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out3="wsdl.http://OrderManagementLib/ItemServiceIF"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://DBMSServiceMediation/xslt/output_map_res_1"
    exclude-result-prefixes="in10 in11 in12 in13 in14 math in15 in16 in17 in18 exsl in19 xalan map set in in2 in3 date in4 in5 in6 str in7 in8 in9"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="body" mode="map:output_map_res_1"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:output_map_res_1">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out3:retrieveItemResponseMsg'"/>
      </xsl:attribute>
      <out:retrieveItemResponse>
        <item>
          <!-- a simple data mapping: "in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemid"(string) to "itemID"(string) -->
          <xsl:if test="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemid">
            <itemID>
              <xsl:value-of select="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemid"/>
            </itemID>
          </xsl:if>
          <!-- a simple data mapping: "in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemname"(string) to "itemName"(string) -->
          <xsl:if test="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemname">
            <itemName>
              <xsl:value-of select="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemname"/>
            </itemName>
          </xsl:if>
          <!-- a simple data mapping: "in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/price"(int) to "price"(int) -->
          <xsl:if test="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/price">
            <price>
              <xsl:value-of select="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/price"/>
            </price>
          </xsl:if>
          <!-- a for-each transform: "warehouses"(DbadminItemwhs) to "warehouses"(Warehouse) -->
          <xsl:apply-templates select="in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/warehouses" mode="localWarehousesToWarehouses_1589247114"/>
        </item>
        <returnCode>
          <!-- a simple mapping with no associated source:  to "RC"(string) -->
          <RC>
            <xsl:text>3</xsl:text>
          </RC>
        </returnCode>
      </out:retrieveItemResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:output_map_res_12">
    <xsl:param name="body"/>
    <out:retrieveItemResponse>
      <item>
        <!-- a simple data mapping: "$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemid"(string) to "itemID"(string) -->
        <xsl:if test="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemid">
          <itemID>
            <xsl:value-of select="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemid"/>
          </itemID>
        </xsl:if>
        <!-- a simple data mapping: "$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemname"(string) to "itemName"(string) -->
        <xsl:if test="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemname">
          <itemName>
            <xsl:value-of select="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/itemname"/>
          </itemName>
        </xsl:if>
        <!-- a simple data mapping: "$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/price"(int) to "price"(int) -->
        <xsl:if test="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/price">
          <price>
            <xsl:value-of select="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/price"/>
          </price>
        </xsl:if>
        <!-- a for-each transform: "warehouses"(DbadminItemwhs) to "warehouses"(Warehouse) -->
        <xsl:apply-templates select="$body/in18:retrieveDbadminItemBGResponse/in18:retrieveDbadminItemBGOutput/DbadminItem/warehouses" mode="localWarehousesToWarehouses_1589247114"/>
      </item>
      <returnCode>
        <!-- a simple mapping with no associated source:  to "RC"(string) -->
        <RC>
          <xsl:text>3</xsl:text>
        </RC>
      </returnCode>
    </out:retrieveItemResponse>
  </xsl:template>

  <!-- This rule represents a for-each transform: "warehouses" to "warehouses".  -->
  <xsl:template match="warehouses"  mode="localWarehousesToWarehouses_1589247114">
    <warehouses>
      <!-- a simple data mapping: "whsid"(string) to "whsID"(string) -->
      <xsl:if test="whsid">
        <whsID>
          <xsl:value-of select="whsid"/>
        </whsID>
      </xsl:if>
      <!-- a simple data mapping: "stock"(int) to "stock"(int) -->
      <xsl:if test="stock">
        <stock>
          <xsl:value-of select="stock"/>
        </stock>
      </xsl:if>
      <!-- a simple data mapping: "indelivery"(int) to "indelivery"(int) -->
      <xsl:if test="indelivery">
        <indelivery>
          <xsl:value-of select="indelivery"/>
        </indelivery>
      </xsl:if>
    </warehouses>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
