<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="CustomersToFeed.map" md5sum="5cc52ace1df2e1b8d8e527d1db75296a" version="7.0.500" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.500
*
*   Mapping file:		CustomersToFeed.map
*   Map declaration(s):	CustomersToFeed
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCustomers%252FGetCustomers%257DgetCustomersResponseMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCustomerLocationsFeed%252FGetCustomerLocationsFeed%257DgetCustomersAsFeedResponseMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="wsdl.http://Customers/GetCustomers"
    xmlns:in2="http://CustomersLib"
    xmlns:in3="http://Customers/GetCustomers"
    xmlns:out="wsdl.http://CustomerLocationsFeed/GetCustomerLocationsFeed"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out2="http://purl.org/atom/ns#"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out3="http://CustomerLocationsFeed/GetCustomerLocationsFeed"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://CustomerLocations/xslt/CustomersToFeed"
    exclude-result-prefixes="xalan str set in math map exsl in2 date in3"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="io2:smo" mode="map:CustomersToFeed"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template match="io2:smo"  mode="map:CustomersToFeed">
    <io2:smo>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:getCustomersAsFeedResponseMsg'"/>
        </xsl:attribute>
        <out3:getCustomersAsFeedResponse>
          <feed>
            <!-- a simple mapping with no associated source:  to "out2:title"(string) -->
            <out2:title>
              <xsl:text>Customers Feed</xsl:text>
            </out2:title>
            <out2:link>
              <!-- a simple data mapping: "context/transient"(anyType) to "href"(anyURI) -->
              <xsl:attribute name="href">
                <!-- variables for custom code -->
                <xsl:variable name="transient" select="context/transient"/>
                <xsl:value-of select="$transient"/>
              </xsl:attribute>
            </out2:link>
            <!-- a for-each transform: "customers"(Customer) to "out2:entry"(entryType) -->
            <xsl:apply-templates select="body/in3:getCustomersResponse/customers/customers" mode="localCustomersToEntry_2077598018"/>
          </feed>
        </out3:getCustomersAsFeedResponse>
      </body>
    </io2:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template name="map:CustomersToFeed2">
    <xsl:param name="smo"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:getCustomersAsFeedResponseMsg'"/>
      </xsl:attribute>
      <out3:getCustomersAsFeedResponse>
        <feed>
          <!-- a simple mapping with no associated source:  to "out2:title"(string) -->
          <out2:title>
            <xsl:text>Customers Feed</xsl:text>
          </out2:title>
          <out2:link>
            <!-- a simple data mapping: "$smo/context/transient"(anyType) to "href"(anyURI) -->
            <xsl:attribute name="href">
              <!-- variables for custom code -->
              <xsl:variable name="transient" select="$smo/context/transient"/>
              <xsl:value-of select="$transient"/>
            </xsl:attribute>
          </out2:link>
          <!-- a for-each transform: "customers"(Customer) to "out2:entry"(entryType) -->
          <xsl:apply-templates select="$smo/body/in3:getCustomersResponse/customers/customers" mode="localCustomersToEntry_2077598018"/>
        </feed>
      </out3:getCustomersAsFeedResponse>
    </body>
  </xsl:template>

  <!-- This rule represents a for-each transform: "customers" to "out2:entry".  -->
  <xsl:template match="customers"  mode="localCustomersToEntry_2077598018">
    <out2:entry>
      <!-- a simple data mapping: "name"(string) to "out2:title"(string) -->
      <out2:title>
        <xsl:value-of select="name"/>
      </out2:title>
      <out2:link>
        <!-- a simple data mapping: "coordinates/latitude"(string) to "href"(anyURI) -->
        <xsl:attribute name="href">
          <xsl:value-of select="concat('http://maps.google.com/maps?f=q&amp;amp;q=', coordinates/latitude, '+', coordinates/longitude, '&amp;amp;z=14')"/>
        </xsl:attribute>
      </out2:link>
    </out2:entry>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
