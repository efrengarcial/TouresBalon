<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="XSLTransformation2_req_1.map" md5sum="65c25b11f11191c4cff538189828fd9e" version="7.0.500" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.500
*
*   Mapping file:		XSLTransformation2_req_1.map
*   Map declaration(s):	QueryStringToBusinessObject
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCustomerLocationsFeed%252FGetCustomerLocationsFeed%257DgetCustomersAsFeedRequestMsg/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FCustomers%252FGetCustomers%257DgetCustomersRequestMsg/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="wsdl.http://CustomerLocationsFeed/GetCustomerLocationsFeed"
    xmlns:in2="http://purl.org/atom/ns#"
    xmlns:in3="http://CustomerLocationsFeed/GetCustomerLocationsFeed"
    xmlns:out="wsdl.http://Customers/GetCustomers"
    xmlns:out2="http://CustomersLib"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out3="http://Customers/GetCustomers"
    xmlns:xsd4xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:map="http://CustomerLocationsFeed/xslt/XSLTransformation2_req_1"
    exclude-result-prefixes="xalan str set math map exsl date"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root template  -->
  <xsl:template match="/">
    <xsl:apply-templates select="io2:smo" mode="map:QueryStringToBusinessObject"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template match="io2:smo"  mode="map:QueryStringToBusinessObject">
    <io2:smo>
      <!-- a structural mapping: "headers/HTTPHeader/control/io5:URL"(anyURI) to "context"(ContextType) -->
      <xsl:apply-templates select="headers/HTTPHeader/control/io5:URL" mode="localURLToContext_384271331"/>
      <body>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:getCustomersRequestMsg'"/>
        </xsl:attribute>
        <out3:getCustomers>
          <type>
            <!-- a simple data mapping: "headers/HTTPHeader/control/io5:URL"(anyURI) to "type"(string) -->
            <xsl:if test="headers/HTTPHeader/control/io5:URL">
              <type>
                <!-- variables for custom code -->
                <xsl:variable name="URL" select="headers/HTTPHeader/control/io5:URL"/>
                <xsl:value-of select="substring-after($URL,'type=')"/>
              </type>
            </xsl:if>
          </type>
        </out3:getCustomers>
      </body>
    </io2:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io2:smo" to "io2:smo".  -->
  <xsl:template name="map:QueryStringToBusinessObject2">
    <xsl:param name="smo"/>
    <!-- a structural mapping: "$smo/headers/HTTPHeader/control/io5:URL"(anyURI) to "context"(ContextType) -->
    <xsl:apply-templates select="$smo/headers/HTTPHeader/control/io5:URL" mode="localURLToContext_384271331"/>
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out:getCustomersRequestMsg'"/>
      </xsl:attribute>
      <out3:getCustomers>
        <type>
          <!-- a simple data mapping: "$smo/headers/HTTPHeader/control/io5:URL"(anyURI) to "type"(string) -->
          <xsl:if test="$smo/headers/HTTPHeader/control/io5:URL">
            <type>
              <!-- variables for custom code -->
              <xsl:variable name="URL" select="$smo/headers/HTTPHeader/control/io5:URL"/>
              <xsl:value-of select="substring-after($URL,'type=')"/>
            </type>
          </xsl:if>
        </type>
      </out3:getCustomers>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "io5:URL" to "context".  -->
  <xsl:template match="io5:URL"  mode="localURLToContext_384271331">
    <context>
      <!-- a structural mapping: "."(anyURI) to "transient"(anyType) -->
      <xsl:if test=".">
        <transient>
          <xsl:attribute name="xsi:type">
            <xsl:value-of select="'xsd4xsd:anyURI'"/>
          </xsl:attribute>
          <xsl:call-template name="copyNamespaceDeclarations">
            <xsl:with-param name="root" select="."/>
          </xsl:call-template>
          <xsl:copy-of select="./@*|./node()"/>
        </transient>
      </xsl:if>
    </context>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
